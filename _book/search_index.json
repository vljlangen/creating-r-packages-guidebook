[["index.html", "Creating R Packages: A Step-by-Step Guide 1 Introduction", " Creating R Packages: A Step-by-Step Guide Ville Langén 08.06.2024 1 Introduction Welcome to “Creating R Packages: A Step-by-Step Guide”. This book is designed to help beginners dive into the world of R package development. Whether you’re a data scientist, a statistician, or a hobbyist R programmer, this guide will provide you with the knowledge and skills to create your own R packages. In this book, you’ll learn how to: Set up your development environment Create the basic structure of an R package Write and document functions Add and document data Test your package to ensure reliability Build and check your package Share your package with others through GitHub Each chapter is designed to be practical and hands-on, with step-by-step instructions and examples. By the end of this book, you’ll have a fully functioning R package that you can share with the world. Throughout this tutorial, we’ll be using RStudio, a popular integrated development environment (IDE) for R, to perform various tasks. Let’s get started on your journey to becoming an R package developer! Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["required-packages.html", "2 Required Packages", " 2 Required Packages To follow along with this tutorial, you’ll need to have certain packages installed in your R environment. Specifically, we’ll be using devtools and tidyverse. You can install these packages using the install.packages() function in R. Here’s how you can do it: install.packages(&quot;devtools&quot;) install.packages(&quot;tidyverse&quot;) Once installed, load these packages into your R session using the library() function: library(devtools) library(tidyverse) Now that you have these packages installed and loaded, you’re ready to proceed with the tutorial. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["writing-basic-functions.html", "3 Writing Basic Functions 3.1 Example function 1 3.2 Example function 2 3.3 Saving Your Code", " 3 Writing Basic Functions In this chapter, we’ll start by writing a couple of simple functions. These functions will be used later on in the R package we are creating. Below is a screenshot of writing these functions in RStudio. Further down on this page, you will find the code in a text format, which you can copy and paste into your editor. 3.1 Example function 1 The say_hello_to() function takes one argument, a name, and prints a greeting message. say_hello_to &lt;- function(name) { message &lt;- paste0(&quot;Hello, &quot;, name, &quot;!&quot;) print(message) } # Example usage say_hello_to(&quot;John&quot;) ## [1] &quot;Hello, John!&quot; 3.2 Example function 2 The throw_dice() function simulates rolling a six-sided die. It generates a random number between 1 and 6 and prints the result. throw_dice &lt;- function() { roll &lt;- sample(1:6, 1) message &lt;- paste0(&quot;You rolled a &quot;, roll, &quot;.&quot;) print(message) } # Example usage throw_dice() ## [1] &quot;You rolled a 3.&quot; 3.3 Saving Your Code After writing these functions and testing them in an R environment like RStudio, make sure to save or copy-paste them somewhere. This way, you can introduce them to your R package once we progress further in this tutorial. In this example, I copied the functions to Visual Studio Code (as shown in the screenshot below), but you can use any text editor, such as TextEdit on MacOS or Notepad on Windows, or simply save the code somewhere on your computer. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["setting-up-git-and-github.html", "4 Setting Up Git and GitHub 4.1 Installing Git 4.2 Tell Git your credentials 4.3 Signing Up for GitHub 4.4 Setting Up a Personal Access Token (PAT)", " 4 Setting Up Git and GitHub For distributing your package to your friends or colleagues and for backup purposes, it is always advisable to push your package to a code repository. In this tutorial, we will use the GitHub service and set up a secure connection between it and your computer using a Personal Access Token (PAT). If you already have this set up, you can jump right to the next chapter. Otherwise, read on. 4.1 Installing Git If you are on Mac, you don’t have to install anything. If you are on Windows, go to the following webpage and download Git and install it (preferably with default settings): Download Git for Windows 4.2 Tell Git your credentials If you have already set up your name and email in Git, you can skip below to signing up for GitHub. 4.2.1 On Mac Press Command (or Cmd) button and spacebar button simultaneously A Spotlight Search pops up Write: terminal You don’t usually have to write more than a couple of letters, and already then your computer suggests the application Terminal, and you can just press enter to make it launch Terminal launches. Run the following lines of codes on it (replace your credentials to the lines below): git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;youremail@example.com&quot; You may now close the Terminal. 4.2.2 On Windows Press the Windows Key + R on your keyboard Type CMD and press enter Type git-bash.exe If this does not work, do the following: Press the Windows Key + R on your keyboard Type Git Bash and press enter A Unix-kind of shell should launch. Run the following lines of codes on it (replace your credentials to the lines below): git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;youremail@example.com&quot; You may now close the Git Bash. 4.3 Signing Up for GitHub If you don’t have a GitHub account yet, you’ll need to sign up for one. Follow these steps: Go to GitHub and click on “Sign up” in the top right corner. Follow the on-screen instructions to create your account. Note that GitHub now uses Two-Factor Authentication (2FA) for added security, so you will need to set this up during the registration process. After signing up or signing in to GitHub, do not sign out! Because in the next step, the user needs to be signed in to GitHub as we will create a Personal Access Token (PAT) from within RStudio. 4.4 Setting Up a Personal Access Token (PAT) We will now set up a Personal Access Token (PAT) which will be used to authenticate your actions on GitHub. As mentioned earlier, if you already have a connection established with a PAT between your computer and GitHub, you can skip over this section and proceed to the next chapter. 4.4.1 Creating a PAT in R Open your R console and run the following command to create a GitHub token: usethis::create_github_token() This command will take you back to GitHub in your web browser, where you signed up or logged in moments ago, and open a web page where you can generate a new PAT. Follow these steps: Give your PAT any name you want and set an expiration date. Select the scopes you want to grant (for typical package development, the default scopes are usually sufficient). Click “Generate token”. Copy the generated token to your clipboard and save it to a secure place, such as a password manager. You will not be able to see this token again once you leave the page. (Don’t worry about my showing my PAT in the above animated GIF. By the time you see this video that PAT is already deleted.) 4.4.2 Storing the PAT Using gitcreds() Back in your R console, run the following command to store your PAT securely: gitcreds::gitcreds_set() You will be prompted to paste your PAT. Paste it and press Enter. After completing these steps, you will have set up a secure connection with GitHub using a Personal Access Token (PAT). Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
