[["index.html", "Creating R Packages: A Step-by-Step Guide 1 Introduction", " Creating R Packages: A Step-by-Step Guide Ville Langén 09.06.2024 1 Introduction Welcome to “Creating R Packages: A Step-by-Step Guide”. This book is designed to help beginners dive into the world of R package development. Whether you’re a data scientist, a statistician, or a hobbyist R programmer, this guide will provide you with the knowledge and skills to create your own R packages. In this book, you’ll learn how to: Set up your development environment Create the basic structure of an R package Write and document functions Add and document data Test your package to ensure reliability Build and check your package Share your package with others through GitHub Each chapter is designed to be practical and hands-on, with step-by-step instructions and examples. By the end of this book, you’ll have a fully functioning R package that you can share with the world. Throughout this tutorial, we’ll be using RStudio, a popular integrated development environment (IDE) for R, to perform various tasks. Let’s get started on your journey to becoming an R package developer! Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["required-packages.html", "2 Required Packages", " 2 Required Packages To follow along with this tutorial, you’ll need to have certain packages installed in your R environment. Specifically, we’ll install devtools. You can install it using the install.packages() function in R. Here’s how you can do it: install.packages(&quot;devtools&quot;) This command will also ensure that usethis is installed. It is is a very important package for package development in R, as it automates many setup tasks. When usethis is installed, another important package, gh, is automatically installed as well. Once installed, load these packages into your R session using the library() function: library(devtools) Now that you have these packages installed and loaded, you’re ready to proceed with the tutorial. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["creating-functions-and-datasets.html", "3 Creating Functions and Datasets 3.1 Example Function 1 3.2 Example Data Set 3.3 Example Function 2 3.4 Saving Your Code", " 3 Creating Functions and Datasets In this chapter, we’ll create a couple of simple functions and an example dataframe. Below is a screenshot of writing these functions in RStudio. Further down on this page, you will find the codes in a text format, which you can copy and paste into your editor. 3.1 Example Function 1 We’ll now create a simple function that randomly recommends a movie from the “ggplot2movies” dataset. # Not to be included in the package but run here on this tutorial page if (!require(ggplot2movies)) { install.packages(&quot;ggplot2movies&quot;) library(ggplot2movies) } ## Loading required package: ggplot2movies # Function to randomly recommend a movie random_movie_recommendation &lt;- function() { # Load the movies dataset data(movies, package = &quot;ggplot2movies&quot;) # Get the movie title at the random index recommended_movie &lt;- sample(movies$title, 1) # Return the recommended movie return(recommended_movie) } # Example usage random_movie_recommendation() ## [1] &quot;Cutman, The&quot; 3.2 Example Data Set In addition to functions, it’s often helpful to include example datasets in your package to demonstrate how your functions can be used. We’ll now create a small example dataset called example_data and add it to our package. # Create example dataset example_data &lt;- data.frame( ID = c(&quot;01&quot;, &quot;02&quot;, &quot;03&quot;, &quot;04&quot;, &quot;05&quot;), Age = c(25, 30, 35, 40, 45), Likes_Coffee = as.factor(c(TRUE, FALSE, TRUE, TRUE, FALSE)) ) # Display the dataset example_data ## ID Age Likes_Coffee ## 1 01 25 TRUE ## 2 02 30 FALSE ## 3 03 35 TRUE ## 4 04 40 TRUE ## 5 05 45 FALSE 3.3 Example Function 2 This function calculates the mean of a numeric variable (like age) for rows where another variable (like ‘Likes_Coffee’) has the value TRUE. In our example dataset, it can be used to find the mean age of people who like coffee. calculate_group_stats &lt;- function(df, numeric_var, factor_var) { # Filter the dataframe for rows where the factor variable is TRUE filtered_df &lt;- df[df[[factor_var]] == TRUE, ] # Calculate the mean of the numeric variable for the filtered dataframe mean_val &lt;- mean(filtered_df[[numeric_var]]) # Return the mean value return(mean_val) } # Example usage calculate_group_stats(example_data, &quot;Age&quot;, &quot;Likes_Coffee&quot;) ## [1] 33.33333 3.4 Saving Your Code After writing these functions and testing them in an R environment like RStudio, make sure to save or copy-paste them somewhere. This way, you can introduce them to your R package once we progress further in this tutorial. In this example, I copied the functions to Visual Studio Code (as shown in the screenshot below), but you can use any text editor, such as TextEdit on MacOS or Notepad on Windows, or simply save the code somewhere on your computer. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["setting-up-git-and-github.html", "4 Setting Up Git and GitHub 4.1 Installing Git 4.2 Tell Git your credentials 4.3 Signing Up for GitHub 4.4 Personal Access Token (PAT)", " 4 Setting Up Git and GitHub For distributing your package to your friends or colleagues and for backup purposes, it is always advisable to push your package to a code repository. In this tutorial, we will use the GitHub service and set up a secure connection between it and your computer using a Personal Access Token (PAT). If you already have this set up, you can jump right to the next chapter. If you already have an SSH connection set up between your computer and GitHub, you can still set up a connection using a PAT. So, read on. And particularly if you didn’t grasp much of what was mentioned above, please continue reading. 4.1 Installing Git First of all, ensure that Git is installed on your computer. If you are on Mac, you’re all set, as Git comes pre-installed. However, if you’re on Windows and don’t have Git installed yet, head to the following webpage to download and install it (preferably with default settings): Download Git for Windows 4.2 Tell Git your credentials If you’ve already configured your name and email in Git, you can skip this part and jump to the subheader “Signing up for GitHub”. 4.2.1 On Mac Press Command (or Cmd) button and spacebar button simultaneously A Spotlight Search pops up Write: terminal You don’t usually have to write more than a couple of letters, and already then your computer suggests the application Terminal, and you can just press enter to make it launch Terminal launches. Run the following lines of codes on it (replace your credentials to the lines below): git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;youremail@example.com&quot; You may now close the Terminal. 4.2.2 On Windows Press the Windows Key + R on your keyboard Type CMD and press enter Type git-bash.exe If this does not work, do the following: Press the Windows Key + R on your keyboard Type Git Bash and press enter A Unix-kind of shell should launch. Run the following lines of codes on it (replace your credentials to the lines below): git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;youremail@example.com&quot; You may now close the Git Bash. 4.3 Signing Up for GitHub If you don’t have a GitHub account yet, you’ll need to sign up for one. Follow these steps: Go to GitHub and click on “Sign up” in the top right corner. Follow the on-screen instructions to create your account. Note that GitHub now uses Two-Factor Authentication (2FA) for added security, so you will need to set this up during the registration process. After signing up or signing in to GitHub, do not sign out! Because in the next step, the user needs to be signed in to GitHub as we will create a Personal Access Token (PAT) from within RStudio. 4.4 Personal Access Token (PAT) We will now set up a Personal Access Token (PAT) which will be used to authenticate your actions on GitHub. As mentioned earlier, if you already have a connection established with a PAT between your computer and GitHub, you can skip over this section and proceed to the next chapter. 4.4.1 Creating a PAT in R Open your R console and run the following command to create a GitHub token: usethis::create_github_token() This command will take you back to GitHub in your web browser, where you signed up or logged in moments ago, and open a web page where you can generate a new PAT. Follow these steps: Give your PAT any name you want and set an expiration date. Select the scopes you want to grant (for typical package development, the default scopes are usually sufficient). Click “Generate token”. Copy the generated token to your clipboard and save it to a secure place, such as a password manager. You will not be able to see this token again once you leave the page. (Don’t worry about my showing my PAT in the above animated GIF. By the time you see this video that PAT is already deleted.) 4.4.2 Storing the PAT Using gitcreds() Back in your R console, run the following command to store your PAT securely: gitcreds::gitcreds_set() You will be prompted to paste your PAT. Paste it and press Enter. After completing these steps, you will have set up a secure connection with GitHub using a Personal Access Token (PAT). Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["verifying-the-git-setup.html", "5 Verifying the Git Setup 5.1 GitHub Authentication 5.2 Git Configuration", " 5 Verifying the Git Setup In this chapter, we’ll verify that your setup is working correctly. We’ll use functions from the gh and usethis packages to ensure that everything is configured properly. The following commands are to be run in the Console in RStudio. 5.1 GitHub Authentication First, let’s check if your GitHub authentication is set up correctly. You can use the gh::gh_whoami() function to see the GitHub user that your R session is authenticated as. gh::gh_whoami() If your setup is correct, this function should return your GitHub username and other details about your GitHub account. 5.2 Git Configuration Next, we’ll check the Git configuration using the usethis::git_sitrep() function. This function provides a situational report on your Git configuration and GitHub connection. usethis::git_sitrep() This function will output information about your Git configuration, such as: Your Git username and email The remote URLs for your repository GitHub PAT status GitHub personal details Review the output to ensure that your Git and GitHub configurations are correctly set up. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["creating-an-r-package.html", "6 Creating an R Package 6.1 Prerequisites 6.2 The create_package() function", " 6 Creating an R Package In this chapter, we’ll learn how to create a new R package using the usethis package in R. Creating an R package allows you to organize your functions, data, and documentation for easy distribution and use by others. 6.1 Prerequisites First, ensure you have the necessary prerequisites for naming your package: Package name: Must start with a letter and can contain letters, numbers, and periods (“.”). Forbidden characters: No special characters such as hyphens (“-”), underscores (“_”), or spaces. Descriptive name: Choose a name that broadly represents the functionality of your package since it may contain several functions and example data frames. Directory Path: Decide on a directory where you want to create your package. 6.2 The create_package() function To create a new R package, we’ll use the create_package() function from the usethis package. This function automates the process of setting up the basic structure of an R package. Here’s how you can create a new package: usethis::create_package(&quot;~/yourpath/yourpackagename&quot;) Replace “~/yourpath/yourpackagename” with the desired directory path and package name. This command will create a new directory with the specified package name and set up the necessary files and folders for your package. After running the command, you’ll see a new directory with the following structure: Here’s a brief description of each file and directory: .gitignore: Used by Git to determine which files and directories to ignore in your project. .Rbuildignore: Used by R to determine which files and directories to exclude from the package build process. DESCRIPTION: Contains important metadata about your package such as the package name, version, author, and dependencies. myPackage.Rproj: The RStudio project file that allows you to open the project in RStudio. NAMESPACE: Controls the functions that are exported from your package and made available to users. R/: This directory is where you’ll store all your R scripts that define the functions in your package. In the animated example seen below, I will create a package called “myPackage” using the usethis::create_package() function. In the following chapter, we will initialize a local Git repository, add and commit the files of our package to the repository, and push our package to GitHub. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["committing-and-pushing-to-github.html", "7 Committing and Pushing to GitHub 7.1 .gitignore File 7.2 Initializing Git 7.3 Committing Files 7.4 Changing the Default Branch 7.5 Pushing to GitHub", " 7 Committing and Pushing to GitHub In this chapter, we will initialize a local Git repository, add and commit the files of our package to the repository, and push our package to GitHub. 7.1 .gitignore File The .gitignore file specifies which files and directories should be ignored by Git. This is useful for excluding files that are not relevant to your project, such as temporary files or sensitive information. It is a good practice to add the following files to your .gitignore: .DS_Store .Rhistory .RData .Ruserdata To modify the .gitignore file, click on it in the bottom-right pane of RStudio, add the entries listed above, and then click the save icon. Please see my animated example below: 7.2 Initializing Git To initialize a Git repository for your package, you can use the usethis::use_git() function. This function sets up Git for your package and creates an initial commit. Run the following command in your R console: usethis::use_git() When prompted for permission to commit files, say “Absolutely not”, as committing at this stage can interfere with the next steps. If asked whether to restart your R session, answer “Yeah”. Please see my animated example below: 7.3 Committing Files After initializing Git, you need to commit your files manually. In RStudio, follow these steps: In the top-right pane, go to the “Git” tab. Select all the files you want to commit by clicking the checkboxes next to them. Click the “Commit” button. Write a commit message, such as “Initial commit”. Click the “Commit” button in the commit dialog box. This creates an initial commit with all your package files. Please see my animated example below: 7.4 Changing the Default Branch In recent years, it has become customary to use “main” instead of “master” as the default branch name for new repositories due to the inclusive language initiatives across the tech community. Additionally, using “main” aligns better with GitHub’s default settings, facilitating smoother integrations. To change the branch name in your local repository to “main,” you can use the terminal within RStudio. Here’s how: Open the Terminal tab next to the Console tab in RStudio. Type the following command to rename the branch: git branch -m master main Please see my animated example below: 7.5 Pushing to GitHub Once you have committed your files, you can push your package to GitHub using the usethis::use_github() function. This function creates a new GitHub repository and pushes your local Git repository to GitHub. Run the following command in your R console: usethis::use_github() Follow the prompts to complete the process. This will create a new repository on GitHub and push your local commits to the remote repository. If prompted for permission to commit any further files at this point, say “Negative”. Please see my animated example below: You have now successfully committed and pushed your package to GitHub! In the following chapter, we will start working on special files such as DESCRIPTION, README.md, and others, which are essential for documenting and detailing your package. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["package-metadata-and-license.html", "8 Package Metadata and License 8.1 License File 8.2 DESCRIPTION File 8.3 README File 8.4 Pushing metadata to Github 8.5 Viewing Your Changes on GitHub", " 8 Package Metadata and License In this chapter, we will focus on refining the metadata of our package and ensuring it complies with best practices for package development. 8.1 License File Including a license in our package ensures that users understand the terms under which they can use, modify, and distribute our code. We can generate a license file using the usethis::use_mit_license(\"Your Name\") function, where “Your Name” should be replaced with our name or the name of the package author. This function creates a LICENSE file in the package directory containing the MIT License text. # Generating License File usethis::use_mit_license(&quot;Your Name&quot;) Please see my animated example below: 8.2 DESCRIPTION File The DESCRIPTION file provides metadata about our package, including its title, version, author, and dependencies. If you have followed along with this tutorial, you should already have a partially completed DESCRIPTION file. This file includes essential information about your package, such as the package’s name, title, version, author details, and license. If you don’t have a DESCRIPTION file yet, you can create one using the usethis::use_description() function. This function generates a basic DESCRIPTION file, which you can then edit to include additional details. # Modifying DESCRIPTION File usethis::use_description() Please see my animated example below: For this example package that we are writing, we could use the following DESCRIPTION file text. Click on the DESCRIPTION file in the bottom-right pane and replace its contents with these contents. Make sure to type in your name instead of mine. Package: myPackage Type: Package Title: My Awesome R Package Version: 0.1.0 Author: Ville Langén Maintainer: Ville Langén &lt;email address here&gt; Description: This package provides functions to work with movie data and calculate group means based on binary variables. It also includes an example dataset. License: MIT + file LICENSE Encoding: UTF-8 LazyData: true RoxygenNote: 7.1.1 Imports: ggplot2movies Remember to write out dependencies, in this case ggplot2movies, because our function random_movie_recommendation() will use it. 8.3 README File A README file is essential for providing an overview of the package, its functionality, and how to use it. We can generate a README file using the usethis::use_readme_md() function. This function creates a README.md file in the package directory, which we can then edit to include relevant information about our package, including installation instructions, usage examples, and acknowledgments. # Generating README File usethis::use_readme_md() Please see my animated example below: 8.4 Pushing metadata to Github After making changes to the DESCRIPTION file, README, and other package files, it’s important to commit and push these changes to your GitHub repository. This ensures that your work is saved and synchronized with the remote repository. Here’s how you can do it using the upper right pane of RStudio: Open the Git Pane: In RStudio, you’ll see the Git tab in the upper right pane. Click on it to view your current repository status. Stage Your Changes: You’ll see a list of files that have been modified. Check the boxes next to the files you want to stage for the commit (e.g., DESCRIPTION, README.md, LICENSE). Commit Your Changes: Click the “Commit” button. This will open a new window where you can review your changes. Enter a meaningful commit message summarizing the changes you made (e.g., “Create metadata and license files”). Push Your Changes to GitHub: After committing, click the “Push” button to send your changes to the remote repository on GitHub. Here’s a visual guide: 8.5 Viewing Your Changes on GitHub After committing and pushing your changes, you can view the updated metadata files and README on your GitHub repository. Follow these steps: Navigate to Your GitHub Repository: Open your web browser and go to the GitHub repository where you have pushed your changes. Refresh the Page: Click the refresh button on your browser to reload the repository page and ensure the latest changes are visible. View the Updated Files: Scroll down to the file list in your repository. You should see the updated DESCRIPTION, README.md, and LICENSE files. Check the README: Scroll down to see how the README.md file is rendered. GitHub automatically formats Markdown files, so you will see a nicely formatted version of your README with headings, lists, and other Markdown elements. Here’s a visual guide: By addressing these aspects of package development, we enhance the professionalism and usability of our package, making it more accessible to potential users and contributors. In the next section, we will incorporate into our package the functions and example data that we wrote earlier. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
