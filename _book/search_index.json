[["creating-functions-and-datasets.html", "3 Creating Functions and Datasets 3.1 Example Function 1 3.2 Example Data Set 3.3 Example Function 2 3.4 Saving Your Code", " 3 Creating Functions and Datasets In this chapter, we’ll create a couple of simple functions and an example dataframe. Below is a screenshot of writing these functions in RStudio. Further down on this page, you will find the codes in a text format, which you can copy and paste into your editor. 3.1 Example Function 1 We’ll now create a simple function that randomly recommends a movie from the “ggplot2movies” dataset. # Not to be included in the package but run here on this tutorial page if (!require(ggplot2movies)) { install.packages(&quot;ggplot2movies&quot;) library(ggplot2movies) } ## Loading required package: ggplot2movies # Function to randomly recommend a movie random_movie_recommendation &lt;- function() { # Load the movies dataset data(movies, package = &quot;ggplot2movies&quot;) # Get the movie title at the random index recommended_movie &lt;- sample(movies$title, 1) # Return the recommended movie return(recommended_movie) } # Example usage random_movie_recommendation() ## [1] &quot;Yam yeung lo ji sing goon faat choi&quot; 3.2 Example Data Set In addition to functions, it’s often helpful to include example datasets in your package to demonstrate how your functions can be used. We’ll now create a small example dataset called example_data and add it to our package. # Create example dataset example_data &lt;- data.frame( ID = c(&quot;01&quot;, &quot;02&quot;, &quot;03&quot;, &quot;04&quot;, &quot;05&quot;), Age = c(25, 30, 35, 40, 45), Likes_Coffee = as.factor(c(TRUE, FALSE, TRUE, TRUE, FALSE)) ) # Display the dataset example_data ## ID Age Likes_Coffee ## 1 01 25 TRUE ## 2 02 30 FALSE ## 3 03 35 TRUE ## 4 04 40 TRUE ## 5 05 45 FALSE 3.3 Example Function 2 This function calculates the mean of a numeric variable (like age) for rows where another variable (like ‘Likes_Coffee’) has the value TRUE. In our example dataset, it can be used to find the mean age of people who like coffee. calculate_group_stats &lt;- function(df, numeric_var, factor_var) { # Filter the dataframe for rows where the factor variable is TRUE filtered_df &lt;- df[df[[factor_var]] == TRUE, ] # Calculate the mean of the numeric variable for the filtered dataframe mean_val &lt;- mean(filtered_df[[numeric_var]]) # Return the mean value return(mean_val) } # Example usage calculate_group_stats(example_data, &quot;Age&quot;, &quot;Likes_Coffee&quot;) ## [1] 33.33333 3.4 Saving Your Code After writing these functions and testing them in an R environment like RStudio, make sure to save or copy-paste them somewhere. This way, you can introduce them to your R package once we progress further in this tutorial. In this example, I copied the functions to Visual Studio Code (as shown in the screenshot below), but you can use any text editor, such as TextEdit on MacOS or Notepad on Windows, or simply save the code somewhere on your computer. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
