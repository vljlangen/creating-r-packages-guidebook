[["index.html", "Creating R Packages: A Step-by-Step Guide 1 Introduction", " Creating R Packages: A Step-by-Step Guide Ville Langén 11.06.2024 1 Introduction Welcome to “Creating R Packages: A Step-by-Step Guide”. This book is designed to help beginners dive into the world of R package development. Whether you’re a data scientist, a statistician, or a hobbyist R programmer, this guide will provide you with the knowledge and skills to create your own R packages. In this book, you’ll learn how to: Set up your development environment Create the basic structure of an R package Write and document functions Add and document data Test your package to ensure reliability Build and check your package Share your package with others through GitHub Each chapter is designed to be practical and hands-on, with step-by-step instructions and examples. By the end of this book, you’ll have a fully functioning R package that you can share with the world. Throughout this tutorial, we’ll be using RStudio, a popular integrated development environment (IDE) for R, to perform various tasks. Let’s get started on your journey to becoming an R package developer! Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["required-packages.html", "2 Required Packages", " 2 Required Packages To follow along with this tutorial, you’ll need to have certain packages installed in your R environment. Specifically, we’ll install devtools. You can install it using the install.packages() function in R. Here’s how you can do it: install.packages(&quot;devtools&quot;) This command will also ensure that usethis is installed. It is is a very important package for package development in R, as it automates many setup tasks. When usethis is installed, another important package, gh, is automatically installed as well. Once installed, load these packages into your R session using the library() function: library(devtools) Now that you have these packages installed and loaded, you’re ready to proceed with the tutorial. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["creating-functions-and-datasets.html", "3 Creating Functions and Datasets 3.1 Example Function 1 3.2 Example Data Set 3.3 Example Function 2 3.4 Saving Your Code", " 3 Creating Functions and Datasets In this chapter, we’ll create a couple of simple functions and an example dataframe. Below is a screenshot of writing these functions in RStudio. Further down on this page, you will find the codes in a text format, which you can copy and paste into your editor. 3.1 Example Function 1 We’ll now create a simple function that randomly recommends a movie from the “ggplot2movies” dataset. # Not to be included in the package but run here on this tutorial page if (!require(ggplot2movies)) { install.packages(&quot;ggplot2movies&quot;) library(ggplot2movies) } ## Loading required package: ggplot2movies # Function to randomly recommend a movie random_movie_recommendation &lt;- function() { # Load the movies dataset data(movies, package = &quot;ggplot2movies&quot;) # Get the movie title at the random index recommended_movie &lt;- sample(movies$title, 1) # Return the recommended movie return(recommended_movie) } # Example usage random_movie_recommendation() ## [1] &quot;D.O.A.&quot; 3.2 Example Data Set In addition to functions, it’s often helpful to include example datasets in your package to demonstrate how your functions can be used. We’ll now create a small example dataset called example_data and add it to our package. # Create example dataset example_data &lt;- data.frame( ID = c(&quot;01&quot;, &quot;02&quot;, &quot;03&quot;, &quot;04&quot;, &quot;05&quot;), Age = c(25, 30, 35, 40, 45), Likes_Coffee = as.factor(c(TRUE, FALSE, TRUE, TRUE, FALSE)) ) # Display the dataset example_data ## ID Age Likes_Coffee ## 1 01 25 TRUE ## 2 02 30 FALSE ## 3 03 35 TRUE ## 4 04 40 TRUE ## 5 05 45 FALSE 3.3 Example Function 2 This function calculates the mean of a numeric variable (like age) for rows where another variable (like ‘Likes_Coffee’) has the value TRUE. In our example dataset, it can be used to find the mean age of people who like coffee. calculate_group_mean &lt;- function(df, numeric_var, factor_var) { # Filter the dataframe for rows where the factor variable is TRUE filtered_df &lt;- df[df[[factor_var]] == TRUE, ] # Calculate the mean of the numeric variable for the filtered dataframe mean_val &lt;- mean(filtered_df[[numeric_var]]) # Return the mean value return(mean_val) } # Example usage calculate_group_mean(example_data, &quot;Age&quot;, &quot;Likes_Coffee&quot;) ## [1] 33.33333 3.4 Saving Your Code After writing these functions and testing them in an R environment like RStudio, make sure to save or copy-paste them somewhere. This way, you can introduce them to your R package once we progress further in this tutorial. In this example, I copied the functions to Visual Studio Code (as shown in the screenshot below), but you can use any text editor, such as TextEdit on MacOS or Notepad on Windows, or simply save the code somewhere on your computer. In the next chapter, we’ll discuss how to set up Git and GitHub for version control and sharing your package. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["setting-up-git-and-github.html", "4 Setting Up Git and GitHub 4.1 Installing Git 4.2 Tell Git your credentials 4.3 Signing Up for GitHub 4.4 Personal Access Token (PAT)", " 4 Setting Up Git and GitHub For distributing your package to your friends or colleagues and for backup purposes, it is always advisable to push your package to a code repository. In this tutorial, we will use the GitHub service and set up a secure connection between it and your computer using a Personal Access Token (PAT). If you already have this set up, you can jump right to the next chapter. If you already have an SSH connection set up between your computer and GitHub, you can still set up a connection using a PAT. So, read on. And particularly if you didn’t grasp much of what was mentioned above, please continue reading. 4.1 Installing Git First of all, ensure that Git is installed on your computer. If you are on Mac, you’re all set, as Git comes pre-installed. However, if you’re on Windows and don’t have Git installed yet, head to the following webpage to download and install it (preferably with default settings): Download Git for Windows 4.2 Tell Git your credentials If you’ve already configured your name and email in Git, you can skip this part and jump to the subheader “Signing up for GitHub”. 4.2.1 On Mac Press Command (or Cmd) button and spacebar button simultaneously A Spotlight Search pops up Write: terminal You don’t usually have to write more than a couple of letters, and already then your computer suggests the application Terminal, and you can just press enter to make it launch Terminal launches. Run the following lines of codes on it (replace your credentials to the lines below): git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;youremail@example.com&quot; You may now close the Terminal. 4.2.2 On Windows Press the Windows Key + R on your keyboard Type CMD and press enter Type git-bash.exe If this does not work, do the following: Press the Windows Key + R on your keyboard Type Git Bash and press enter A Unix-kind of shell should launch. Run the following lines of codes on it (replace your credentials to the lines below): git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;youremail@example.com&quot; You may now close the Git Bash. 4.3 Signing Up for GitHub If you don’t have a GitHub account yet, you’ll need to sign up for one. Follow these steps: Go to GitHub and click on “Sign up” in the top right corner. Follow the on-screen instructions to create your account. Note that GitHub now uses Two-Factor Authentication (2FA) for added security, so you will need to set this up during the registration process. After signing up or signing in to GitHub, do not sign out! Because in the next step, the user needs to be signed in to GitHub as we will create a Personal Access Token (PAT) from within RStudio. 4.4 Personal Access Token (PAT) We will now set up a Personal Access Token (PAT) which will be used to authenticate your actions on GitHub. As mentioned earlier, if you already have a connection established with a PAT between your computer and GitHub, you can skip over this section and proceed to the next chapter. 4.4.1 Creating a PAT in R Open your R console and run the following command to create a GitHub token: usethis::create_github_token() This command will take you back to GitHub in your web browser, where you signed up or logged in moments ago, and open a web page where you can generate a new PAT. Follow these steps: Give your PAT any name you want and set an expiration date. Select the scopes you want to grant (for typical package development, the default scopes are usually sufficient). Click “Generate token”. Copy the generated token to your clipboard and save it to a secure place, such as a password manager. You will not be able to see this token again once you leave the page. (Don’t worry about my showing my PAT in the above animated GIF. By the time you see this video that PAT is already deleted.) 4.4.2 Storing the PAT Using gitcreds() Back in your R console, run the following command to store your PAT securely: gitcreds::gitcreds_set() You will be prompted to paste your PAT. Paste it and press Enter. After completing these steps, you will have set up a secure connection with GitHub using a Personal Access Token (PAT). In the next chapter, we’ll verify that the connection between your computer and GitHub is working. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["verifying-the-git-setup.html", "5 Verifying the Git Setup 5.1 GitHub Authentication 5.2 Git Configuration", " 5 Verifying the Git Setup In this chapter, we’ll verify that your setup is working correctly. We’ll use functions from the gh and usethis packages to ensure that everything is configured properly. The following commands are to be run in the Console in RStudio. 5.1 GitHub Authentication First, let’s check if your GitHub authentication is set up correctly. You can use the gh::gh_whoami() function to see the GitHub user that your R session is authenticated as. gh::gh_whoami() If your setup is correct, this function should return your GitHub username and other details about your GitHub account. 5.2 Git Configuration Next, we’ll check the Git configuration using the usethis::git_sitrep() function. This function provides a situational report on your Git configuration and GitHub connection. usethis::git_sitrep() This function will output information about your Git configuration, such as: Your Git username and email The remote URLs for your repository GitHub PAT status GitHub personal details Review the output to ensure that your Git and GitHub configurations are correctly set up. In the next chapter, we embark on the exciting journey of creating your package, where we’ll use the powerful usethis::create_package() function to kickstart the process. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["creating-an-r-package.html", "6 Creating an R Package 6.1 Prerequisites 6.2 create_package()", " 6 Creating an R Package In this chapter, we’ll learn how to create a new R package using the usethis package in R. Creating an R package allows you to organize your functions, data, and documentation for easy distribution and use by others. 6.1 Prerequisites First, ensure you have the necessary prerequisites for naming your package: Package name: Must start with a letter and can contain letters, numbers, and periods (“.”). Forbidden characters: No special characters such as hyphens (“-”), underscores (“_”), or spaces. Descriptive name: Choose a name that broadly represents the functionality of your package since it may contain several functions and example data frames. Directory Path: Decide on a directory where you want to create your package. 6.2 create_package() To create a new R package, we’ll use the create_package() function from the usethis package. This function automates the process of setting up the basic structure of an R package. Here’s how you can create a new package: usethis::create_package(&quot;~/yourpath/yourpackagename&quot;) Replace “~/yourpath/yourpackagename” with the desired directory path and package name. This command will create a new directory with the specified package name and set up the necessary files and folders for your package. After running the command, you’ll see a new directory with the following structure: Here’s a brief description of each file and directory: .gitignore: Used by Git to determine which files and directories to ignore in your project. .Rbuildignore: Used by R to determine which files and directories to exclude from the package build process. DESCRIPTION: Contains important metadata about your package such as the package name, version, author, and dependencies. myPackage.Rproj: The RStudio project file that allows you to open the project in RStudio. NAMESPACE: Controls the functions that are exported from your package and made available to users. R/: This directory is where you’ll store all your R scripts that define the functions in your package. In the animated example seen below, I will create a package called “myPackage” using the usethis::create_package() function. In the following chapter, we will initialize a local Git repository, add and commit the files of our package to the repository, and push our package to GitHub. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["committing-and-pushing-to-github.html", "7 Committing and Pushing to GitHub 7.1 .gitignore File 7.2 Initializing Git 7.3 Committing Files 7.4 Changing the Default Branch 7.5 Pushing to GitHub", " 7 Committing and Pushing to GitHub In this chapter, we will initialize a local Git repository, add and commit the files of our package to the repository, and push our package to GitHub. 7.1 .gitignore File The .gitignore file specifies which files and directories should be ignored by Git. This is useful for excluding files that are not relevant to your project, such as temporary files or sensitive information. It is a good practice to add the following files to your .gitignore: .DS_Store .Rhistory .RData .Ruserdata To modify the .gitignore file, click on it in the bottom-right pane of RStudio, add the entries listed above, and then click the save icon. Please see my animated example below: 7.2 Initializing Git To initialize a Git repository for your package, you can use the usethis::use_git() function. This function sets up Git for your package and creates an initial commit. Run the following command in your R console: usethis::use_git() When prompted for permission to commit files, say “Absolutely not”, as committing at this stage can interfere with the next steps. If asked whether to restart your R session, answer “Yeah”. Please see my animated example below: 7.3 Committing Files After initializing Git, you need to commit your files manually. In RStudio, follow these steps: In the top-right pane, go to the “Git” tab. Select all the files you want to commit by clicking the checkboxes next to them. Click the “Commit” button. Write a commit message, such as “Initial commit”. Click the “Commit” button in the commit dialog box. This creates an initial commit with all your package files. Please see my animated example below: 7.4 Changing the Default Branch In recent years, it has become customary to use “main” instead of “master” as the default branch name for new repositories due to the inclusive language initiatives across the tech community. Additionally, using “main” aligns better with GitHub’s default settings, facilitating smoother integrations. To change the branch name in your local repository to “main,” you can use the terminal within RStudio. Here’s how: Open the Terminal tab next to the Console tab in RStudio. Type the following command to rename the branch: git branch -m master main Please see my animated example below: 7.5 Pushing to GitHub Once you have committed your files, you can push your package to GitHub using the usethis::use_github() function. This function creates a new GitHub repository and pushes your local Git repository to GitHub. Run the following command in your R console: usethis::use_github() Follow the prompts to complete the process. This will create a new repository on GitHub and push your local commits to the remote repository. If prompted for permission to commit any further files at this point, say “Negative”. Please see my animated example below: You have now successfully committed and pushed your package to GitHub! In the following chapter, we will start working on special files such as DESCRIPTION, README.md, and others, which are essential for documenting and detailing your package. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["metadata-and-license.html", "8 Metadata and License 8.1 License File 8.2 DESCRIPTION File 8.3 README File 8.4 Pushing metadata to Github 8.5 Viewing README on GitHub", " 8 Metadata and License In this chapter, we will focus on refining the metadata of our package and ensuring it complies with best practices for package development. 8.1 License File Including a license in our package ensures that users understand the terms under which they can use, modify, and distribute our code. We can generate a license file using the usethis::use_mit_license(\"Your Name\") function, where “Your Name” should be replaced with our name or the name of the package author. This function creates a LICENSE file in the package directory containing the MIT License text. # Generating License File usethis::use_mit_license(&quot;Your Name&quot;) Please see my animated example below: 8.2 DESCRIPTION File The DESCRIPTION file provides metadata about our package, including its title, version, author, and dependencies. If you have followed along with this tutorial, you should already have a partially completed DESCRIPTION file. This file includes essential information about your package, such as the package’s name, title, version, author details, and license. If you don’t have a DESCRIPTION file yet, you can create one using the usethis::use_description() function. This function generates a basic DESCRIPTION file, which you can then edit to include additional details. # Modifying DESCRIPTION File usethis::use_description() Please see my animated example below: For this example package that we are writing, we could use the following DESCRIPTION file text. Click on the DESCRIPTION file in the bottom-right pane and replace its contents with these contents. Make sure to type in your name instead of mine. Package: myPackage Title: My Awesome R Package Version: 0.1.0 Authors@R: person(&quot;Ville&quot;, &quot;Langén&quot;, , &quot;first.last@example.com&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), comment = c(ORCID = &quot;YOUR-ORCID-ID&quot;)) Description: This package provides functions to work with movie data and calculate group means based on binary variables. It also includes an example dataset. License: MIT + file LICENSE Encoding: UTF-8 Roxygen: list(markdown = TRUE) RoxygenNote: 7.3.1 LazyData: yes Imports: ggplot2movies Remember to write out dependencies (under “Imports”), in this case ggplot2movies, because our function random_movie_recommendation() will use it. Mind you that the LazyData: true line ensures that your example_data will be loaded automatically when the library() command is used. 8.3 README File A README file is essential for providing an overview of the package, its functionality, and how to use it. We can generate a README file using the usethis::use_readme_md() function. This function creates a README.md file in the package directory, which we can then edit to include relevant information about our package, including installation instructions, usage examples, and acknowledgments. # Generating README File usethis::use_readme_md() Please see my animated example below: 8.4 Pushing metadata to Github After making changes to the DESCRIPTION file, README, and other package files, it’s important to commit and push these changes to your GitHub repository. This ensures that your work is saved and synchronized with the remote repository. Here’s how you can do it using the upper right pane of RStudio: Open the Git Pane: In RStudio, you’ll see the Git tab in the upper right pane. Click on it to view your current repository status. Stage Your Changes: You’ll see a list of files that have been modified. Check the boxes next to the files you want to stage for the commit (e.g., DESCRIPTION, README.md, LICENSE). Commit Your Changes: Click the “Commit” button. This will open a new window where you can review your changes. Enter a meaningful commit message summarizing the changes you made (e.g., “Create metadata and license files”). Push Your Changes to GitHub: After committing, click the “Push” button to send your changes to the remote repository on GitHub. Here’s a visual guide: 8.5 Viewing README on GitHub After committing and pushing your changes, you can view the updated metadata files and README on your GitHub repository. Follow these steps: Navigate to Your GitHub Repository: Open your web browser and go to the GitHub repository where you have pushed your changes. Refresh the Page: Click the refresh button on your browser to reload the repository page and ensure the latest changes are visible. View the Updated Files: Scroll down to the file list in your repository. You should see the updated DESCRIPTION, README.md, and LICENSE files. Check the README: Scroll down to see how the README.md file is rendered. GitHub automatically formats Markdown files, so you will see a nicely formatted version of your README with headings, lists, and other Markdown elements. Here’s a visual guide: By addressing these aspects of package development, we enhance the professionalism and usability of our package, making it more accessible to potential users and contributors. In the next section, we will incorporate into our package the functions and example data that we wrote earlier. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["adding-functions-and-data.html", "9 Adding Functions and Data 9.1 Adding Functions 9.2 Adding Example Data 9.3 Pushing again to GitHub", " 9 Adding Functions and Data In this chapter, we will integrate the functions and example dataset that we previously created into our package using the use_r() approach provided by the usethis package. 9.1 Adding Functions To add the functions to our package, we will first create an R script file for each function. We can use the use_r() function to automate this process. This function creates a new R script file in the R/ directory of our package. Please see visual guides below: # Adding the random movie recommendation function usethis::use_r(&quot;random_movie_recommendation.R&quot;) # Adding the calculate group mean function usethis::use_r(&quot;calculate_group_mean.R&quot;) 9.2 Adding Example Data Similarly, we can add the example dataset to our package by creating an R script file containing the dataset. It is generally a good idea to save the original script that creates your example dataset. This script should be placed in a folder called “data-raw”. You certainly want that folder and script in your GitHub repository but not to be compiled with your package. Thus, that folder has to be included in a special file called .Rbuildignore. Luckily, there is a convenience function called usethis::use_data_raw() in the usethis package that does all this. You can run this function and provide your example dataset’s name as an argument, particularly if there is only one dataset, but use_data_raw() can also be run without any argument. When you run use_data_raw(), it: Creates the data-raw folder. Adds data-raw to .Rbuildignore. Creates a data script where you can paste the script that creates your example data. In the data script, you will want to have use_data(your_dataset_name) as the last line, which converts the dataset into an .rda file and places it into the data/ folder. Here’s how you can do it: # Adding the example dataset usethis::use_data_raw(&quot;example_data&quot;) After running this function, the script file (“example_data.R”) will be opened automatically. Paste the code that creates your example dataset into this file. At the end of the script, add the following line to save the dataset: # Add prepared data to package usethis::use_data(example_data) Here’s a visual guide: Run the whole script to incorporate your data into your package. This will ensure your dataset is properly saved and included in your package. Remember to save that example_data.R script file before closing it. 9.3 Pushing again to GitHub At this point, it is wise to commit and push all the changes to GitHub to keep your project up-to-date and ensure you have a backup of your progress. Follow these steps to do so: Commit your changes: In RStudio, go to the top-right pane and click on the “Git” tab. You will see a list of the files that have been changed. Check the boxes next to all the files you want to commit. Click on the “Commit” button. In the “Commit message” field, write a descriptive message about the changes you made, for example, “Added example functions and dataset”. Click on the “Commit” button at the bottom right of the window. Push your changes: After committing, click on the “Push” button in the Git tab. This will upload your committed changes to your GitHub repository. Here is a visual guide: In the next section, we’ll focus on testing the functions and example data we have incorporated into our package. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["testing-functions.html", "10 Testing Functions 10.1 Loading the Package 10.2 Testing the Functions", " 10 Testing Functions In this chapter, we’ll focus on testing the functions and example data we have incorporated into our package. Ensuring that everything works as expected is a crucial step in package development. 10.1 Loading the Package Before testing, we need to load our package. We can do this using the devtools::load_all() function, or alternatively, by clicking the “Load All” button in the top-right pane of RStudio. 10.1.1 Using devtools::load_all() To load your package using devtools::load_all(), simply run the following code in your R console: devtools::load_all() 10.1.2 Using the Load All Button Alternatively, you can load your package using the “Load All” button in the top-right pane of RStudio. It can be found in the Build tab. Click the gear-looking “More” icon and select “Load All” to load all the functions and data in your package. Here’s a visual guide: 10.2 Testing the Functions Once the package is loaded, we can start testing our functions to ensure they work as expected. 10.2.1 Testing random_movie_recommendation To test the random_movie_recommendation function, simply call it in the R console: random_movie_recommendation() You should see a random movie title from the ggplot2movies dataset. See visual guide below: 10.2.2 Verifying the Example Data We can also verify that our example data has been correctly incorporated by simply viewing it: example_data This should display the dataset we created earlier. See visual guide below: 10.2.3 Testing calculate_group_mean To test the calculate_group_mean function, call it with the example_data dataset: calculate_group_mean(example_data, &quot;Age&quot;, &quot;Likes_Coffee&quot;) This should return the mean age of the group who likes coffee (denoted by the Likes_Coffee variable). See visual guide below: In the next section, we will document our functions and example data properly. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["documentation.html", "11 Documentation 11.1 roxygen2 skeletons 11.2 Generating Skeletons 11.3 Documenting Functions 11.4 Documenting Datasets 11.5 Generating Documentation 11.6 Documentation to GitHub", " 11 Documentation In this chapter, we’ll focus on documenting the functions and datasets in our package. Proper documentation is essential for helping users understand how to use your package effectively. 11.1 roxygen2 skeletons When documenting functions and datasets in an R package, it is recommended to use roxygen2 skeletons. These are snippets of a kind of markup language, written directly above your functions and dataset definitions. They serve as a convenient way to generate Rd (R documentation) files, which provide detailed information about the usage, parameters, and examples for your functions and datasets. In other words, roxygen2 is the front end that produces Rd files from your comments in your .R files. So, the ground rule is: Thou shalt never directly create or edit Rd (R documentation) files — rather, always document your functions and example datasets using roxygen2 comments. 11.2 Generating Skeletons To create roxygen2 skeletons in RStudio: Open the R script file that contains your function or dataset definition. Place the cursor inside the function or dataset definition. Navigate to the “Code” menu at the top of RStudio. Select “Insert Roxygen Skeleton” from the dropdown menu. RStudio will automatically generate a roxygen2 comment skeleton with placeholders for you to fill out, such as @param, @return, and @examples. This process is explained in more detail and with videos below when I show how to create documentation for random_movie_recommendation and calculate_group_mean. 11.3 Documenting Functions Let’s start by documenting our functions using roxygen2 skeletons. Below, we’ll add roxygen2 comments to our random_movie_recommendation and calculate_group_mean functions. 11.3.1 Documenting random_movie_recommendation To document the random_movie_recommendation function, first navigate to the file containing this function in the bottom-right pane of RStudio and click on it to open it. Then, fill in the following roxygen2 comments above your random_movie_recommendation function using the “Code” menu and selecting “Insert Roxygen Skeleton”. A video below the code will demonstrate these steps visually: #&#39; Random Movie Recommendation #&#39; #&#39; This function randomly recommends a movie from the `ggplot2movies` dataset. #&#39; #&#39; @return A character string representing the title of a randomly selected movie. #&#39; @export #&#39; @examples #&#39; random_movie_recommendation() random_movie_recommendation &lt;- function() { # Load the movies dataset data(movies, package = &quot;ggplot2movies&quot;) # Get the movie title at the random index recommended_movie &lt;- sample(movies$title, 1) # Return the recommended movie return(recommended_movie) } 11.3.2 Documenting calculate_group_mean To document the calculate_group_mean function, first navigate to the file containing this function in the bottom-right pane of RStudio and click on it to open it. Then, fill in the following roxygen2 comments above your calculate_group_mean function using the “Code” menu and selecting “Insert Roxygen Skeleton”. A video below the code will demonstrate these steps visually: #&#39; Calculate Group Mean #&#39; #&#39; This function calculates the mean of a numeric variable for rows where another variable has the value TRUE. #&#39; #&#39; @param df A data frame containing the data. #&#39; @param numeric_var A string representing the name of the numeric variable. #&#39; @param factor_var A string representing the name of the factor (binary) variable. #&#39; @return A numeric value representing the mean of the specified numeric variable for the filtered rows. #&#39; @export #&#39; @examples #&#39; calculate_group_mean(example_data, &quot;Age&quot;, &quot;Likes_Coffee&quot;) calculate_group_mean &lt;- function(df, numeric_var, factor_var) { # Filter the dataframe for rows where the factor variable is TRUE filtered_df &lt;- df[df[[factor_var]] == TRUE, ] # Calculate the mean of the numeric variable for the filtered dataframe mean_val &lt;- mean(filtered_df[[numeric_var]]) # Return the mean value return(mean_val) } 11.4 Documenting Datasets Next, we’ll document our example dataset. Roxygen2 provides a way to document datasets by adding comments in a separate R script file. 11.4.1 Documenting example_data Create a new R script file named data.R in the R directory and add the following roxygen2 comments. A video below the code will demonstrate these steps visually: #&#39; Example Data #&#39; #&#39; A dataset containing example data. #&#39; #&#39; @format A data frame with 5 rows and 3 variables: #&#39; \\describe{ #&#39; \\item{ID}{A character vector representing the ID of each observation.} #&#39; \\item{Age}{A numeric vector representing the age of each observation.} #&#39; \\item{Likes_Coffee}{A factor vector indicating whether the observation likes coffee (TRUE) or not (FALSE).} #&#39; } #&#39; @examples #&#39; example_data &quot;example_data&quot; 11.5 Generating Documentation After adding the roxygen2 comments, we need to generate the documentation files. This can be done using the devtools::document() function, which processes the roxygen2 comments and creates the Rd files. devtools::document() Alternatively, you can use the “Document” button. It can be found in the Build tab. Click the gear-looking “More” icon and select “Document”. 11.6 Documentation to GitHub After updating and generating your documentation, it’s important to push these changes to your GitHub repository to keep your project up-to-date and allow others to see the latest developments. Refer to earlier sections for detailed instructions on how to commit and push changes using the Git pane in RStudio, or watch the video guide below for a visual walkthrough. A suitable commit message for documentation updates might be: Update documentation for functions and datasets In the next chapter, we’ll test how these documents work to ensure that the documentation accurately reflects the functionality of your package. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["testing-your-documentation.html", "12 Testing Your Documentation 12.1 Documentation for Functions 12.2 Documentation for Datasets", " 12 Testing Your Documentation Once you have documented your functions and datasets using roxygen2, it is important to test your documentation to ensure that it accurately reflects the functionality of your package. This chapter will guide you through testing your package’s documentation. If you have been following this tutorial chronologically, you should already have your package and its documentation loaded. However, if for any reason your package is not loaded, you can easily load everything using the following command: devtools::load_all(&quot;.&quot;) 12.1 Documentation for Functions You can view the documentation for a particular function by using the ? followed by the function name. In other words, these help files you have created function just like those you would encounter with official packages on CRAN. For example, to view the documentation for the random_movie_recommendation function, you would use: ?random_movie_recommendation This will open the help page for the function, where you can review the descriptions, parameters, examples, and other relevant information included in your roxygen2 comments. 12.2 Documentation for Datasets To view the documentation for example datasets, you can use the help function with the dataset name. For example, to view the documentation for the example_data dataset, you would use: ?example_data In the next chapter, we will explore how to install your package. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["installing-the-package.html", "13 Installing the Package 13.1 “Install and Restart” Button 13.2 From a Local Directory 13.3 Installing from GitHub 13.4 Installing vs. “Load All”", " 13 Installing the Package In this chapter, we’ll cover how to install your package and explain the difference between installing it and using the “Load All” feature in RStudio. Once you have developed your package and are ready to use it or share it with others, you’ll need to install it. RStudio provides a convenient way to install your package using the “Install and Restart” button. 13.1 “Install and Restart” Button In RStudio, go to the “Build” tab. Click on the “Install and Restart” button. This will compile your package, including all functions, data, and documentation, and install it into your R library. Finally, this will also load your newly installed package using the library function: 13.2 From a Local Directory Alternatively, you can install your package from a local directory using the devtools package. Here’s how you can do it: devtools::install_local(&quot;path/to/your/package&quot;) Replace “path/to/your/package” with the actual path to your package directory. 13.2.1 Troubleshooting Tips Note! If you encounter error messages such as “Error Retrieving Help” […] and/or “…myPackage.rdb’ is corrupt’”, restart your RStudio session, and the issue should be resolved. See the videos below for more information: 13.3 Installing from GitHub If your package is hosted on GitHub, you can install it directly from GitHub using: devtools::install_github(&quot;yourusername/yourrepository&quot;) Replace “yourusername/yourrepository” with your actual GitHub username and repository name. 13.4 Installing vs. “Load All” 13.4.1 Installing the Package When you install a package using the “Install and Restart” button or the install function, R compiles the package and its documentation, and places it in the library directory where other installed packages are located. Once installed, you can load the package using the library function, and it becomes available for use in any R session. 13.4.2 Using “Load All” The “Load All” feature in RStudio, accessible via the devtools::load_all() function or through the “Build” tab by selecting “More” and then “Load All,” is a convenient way to load all functions and data from your package into the R environment without formally installing it. This is particularly useful during development because it allows you to test and debug your package quickly without going through the installation process. However, “Load All” is specific to your current working environment and does not compile the package or its documentation. Therefore, it is not a substitute for installing the package when you are ready to distribute it or use it in a different environment. In the next chapter, we’ll delve into creating vignettes. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["vignettes.html", "14 Vignettes 14.1 Creating a Vignette 14.2 Ensuring Vignettes are Built 14.3 Viewing the Vignettes 14.4 Pushing to GitHub", " 14 Vignettes In this chapter, we’ll walk through the steps to create a vignette for your package. Vignettes are long-form documentation that provide comprehensive examples and explanations of how to use your package. They are particularly useful for tutorials and detailed use cases. If you have followed this tutorial chronologically, you will have your package and documentation loaded. However, if for some reason you don’t anymore, you can load up everything with: devtools::load_all(&quot;.&quot;) You’ll soon find that the vignettes you create will work just like those you would encounter with official packages on CRAN. 14.1 Creating a Vignette First, let’s create a vignette using the usethis::use_vignette() function. This function sets up the necessary infrastructure for vignettes in your package. usethis::use_vignette(&quot;my_vignette&quot;) After running this command, a directory called vignettes/ will be created in your package, and an .Rmd (R Markdown) file for your vignette will be added. It will also automatically update your DESCRIPTION file to include the required dependencies (knitr, markdown) for processing R Markdown files. The usethis::use_vignette() function will automatically open the created R Markdown vignette file. You can then write your vignette in this file using standard R Markdown syntax. Here is an example of what your vignette might look like: --- title: &quot;Introduction to myPackage&quot; author: &quot;Your Name&quot; date: &quot;2024-06-11&quot; output: rmarkdown::html_vignette vignette: &gt; %\\VignetteIndexEntry{Introduction to myPackage} %\\VignetteEngine{knitr::rmarkdown} %\\VignetteEncoding{UTF-8} --- # Introduction This is an example vignette for the `myPackage` package. This practice package contains a couple of functions. One of them, `random_movie_recommendation`, utilizes the `ggplot2movies` package from CRAN, which provides a dataset of movies. The other function, `calculate_group_mean`, uses example data that is included in this package. ## Example Data The `example_data` dataset included in this package contains a small sample of data for demonstration purposes. It has three columns: `ID`, `Age`, and `Likes_Coffee`. Here is how you can load and view the dataset: ```{r} # Load the example dataset data(example_data, package = &quot;myPackage&quot;) # View the dataset example_data ``` # Random Movie Recommendation The `random_movie_recommendation` function randomly selects and returns the title of a movie from the `ggplot2movies` dataset. This function is useful for getting a random movie suggestion. Here is how you can use the `random_movie_recommendation` function: ```{r} random_movie_recommendation() ``` # Calculate Group Mean The `calculate_group_mean` function calculates the mean of a numeric variable for rows where a specified binary variable is TRUE. In our example dataset, it can be used to find the mean age of people who like coffee. Here is how you can use the `calculate_group_mean` function: ```{r} calculate_group_mean(example_data, &quot;Age&quot;, &quot;Likes_Coffee&quot;) ``` 14.2 Ensuring Vignettes are Built By default, when you install a package using the install button in RStudio’s Build tab, it doesn’t build vignettes. To ensure that vignettes are built during installation, you can use the devtools::install(build_vignettes = TRUE) function: devtools::install(build_vignettes = TRUE) 14.3 Viewing the Vignettes Once your package is installed with vignettes, you can view them using: browseVignettes(&quot;myPackage&quot;) This will open a browser window displaying the available vignettes for your package. 14.4 Pushing to GitHub After creating and building your vignette, it’s a good practice to push your changes to GitHub. Refer to earlier sections on how to do that or watch the video guide below. A suitable commit message could be “Add vignette for myPackage”. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
