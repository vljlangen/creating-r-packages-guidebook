[["index.html", "Creating R Packages: A Step-by-Step Guide 1 Introduction", " Creating R Packages: A Step-by-Step Guide Ville Langén 06.06.2024 1 Introduction Welcome to “Creating R Packages: A Step-by-Step Guide”. This book is designed to help beginners dive into the world of R package development. Whether you’re a data scientist, a statistician, or a hobbyist R programmer, this guide will provide you with the knowledge and skills to create your own R packages. In this book, you’ll learn how to: Set up your development environment Create the basic structure of an R package Write and document functions Add and document data Test your package to ensure reliability Build and check your package Share your package with others through GitHub Each chapter is designed to be practical and hands-on, with step-by-step instructions and examples. By the end of this book, you’ll have a fully functioning R package that you can share with the world. Let’s get started on your journey to becoming an R package developer! Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["writing-basic-functions.html", "2 Writing Basic Functions 2.1 Example function 1 2.2 Example function 2 2.3 Saving Your Code", " 2 Writing Basic Functions In this chapter, we’ll start by writing a couple of simple functions. These functions will be used later on in the R package we are creating. You can write these functions in any R environment, such as RStudio. Below is a screenshot of writing these functions in RStudio. Further down on this page, you will find the code in a text format, which you can copy and paste into your editor. 2.1 Example function 1 The say_hello_to() function takes one argument, a name, and prints a greeting message. say_hello_to &lt;- function(name) { message &lt;- paste0(&quot;Hello, &quot;, name, &quot;!&quot;) print(message) } # Example usage say_hello_to(&quot;John&quot;) ## [1] &quot;Hello, John!&quot; 2.2 Example function 2 The throw_dice() function simulates rolling a six-sided die. It generates a random number between 1 and 6 and prints the result. throw_dice &lt;- function() { roll &lt;- sample(1:6, 1) message &lt;- paste0(&quot;You rolled a &quot;, roll, &quot;.&quot;) print(message) } # Example usage throw_dice() ## [1] &quot;You rolled a 6.&quot; 2.3 Saving Your Code After writing these functions and testing them in an R environment like RStudio, make sure to save or copy-paste them somewhere. This way, you can introduce them to your R package once we progress further in this tutorial. In this example, I copied the functions to Visual Studio Code (as shown in the screenshot below), but you can use any text editor, such as TextEdit on MacOS or Notepad on Windows, or simply save the code somewhere on your computer. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["setting-up-git-and-github.html", "3 Setting Up Git and GitHub", " 3 Setting Up Git and GitHub For distributing your package to your friends or colleagues and for backup purposes, it is always advisable to push your package to a code repository. In this tutorial, we will use the GitHub service. If you have never used GitHub before or don’t have a working connection between GitHub and your computer, you’ll need to follow a tutorial to set up Git and GitHub. There are many excellent tutorials available online, and I recommend starting with one to get familiar with the process. One such tutorial is available on Medium and provides a simple guide for setting up Git on MacOS: Setting Up Git on Mac Similar tutorials are available for other platforms, such as Windows. Disclaimer: I have not tried the above tutorial myself. While the above tutorial seems like a good one, it’s always a good idea to explore multiple resources to find the approach that works best for you. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["creating-a-repo-for-an-r-package.html", "4 Creating a repo for an R package 4.1 Create a new repo on GitHub 4.2 Clone the repo to computer 4.3 Modify .gitignore file 4.4 Initial commit to GitHub", " 4 Creating a repo for an R package In this section, we’ll guide you through the process of creating a GitHub repository for your R package and opening it in RStudio using version control. 4.1 Create a new repo on GitHub Go to GitHub and log in to your account. In the middle of the screen, you will find the button “Create a new repository”. Above that button, you will be prompted to give your repository a name. For this tutorial, we’ll use the name “r-package-practice”. You also have to choose whether your repository will be public or private; for the sake of this practice, you may choose “Private”. After these steps, click on the button “Create a new repository”. Next, you’ll see a screen from which you can copy your GitHub repository’s URL address by clicking the Copy button. 4.2 Clone the repo to computer Open RStudio on your local machine. Go to File &gt; New Project &gt; Version Control &gt; Git. In the “Repository URL” field, paste the URL of the GitHub repository you just created. When you press the Tab key on your keyboard once, the “Project directory name” will update accordingly immediately, and so will the suggested project’s subdirectory below it. It is perhaps advisable to start this project in a new session, so you may tick the “Open in new session” checkbox. If you’re happy with all the suggested fields, you may click “Create Project”. 4.3 Modify .gitignore file Next, we’ll work on the .gitignore file. It contains the file types that you will not want to be pushed to the remote repository (here: to GitHub). Click on the .gitignore file’s name. There is already useful content in the .gitignore file. We want to add one file type to .gitignore, and that is .DS_Store. It does not affect Windows users, but if even one MacOS-using colleague will be joining the development of your package at some point, you will want that file type to be added to .gitignore. Once you have added that file type to .gitignore, click the save icon located above it.” 4.4 Initial commit to GitHub You will now notice a couple of files below the Git tab on the top-right pane. You are now ready to make the initial commit to GitHub. Click the Commit icon. Tick all the new files, write a commit message, and click the Commit button. When you will see the following message, click the Close button. Then click the Push button. Upon successful completion of the commit push process, you will see the following notice. Congratulations! You may now close the notice and the commit window. If you now go back to GitHub in your web browser and click on your repository’s name, you can see a recent commit. Creating R Packages: A Step-by-Step Guide by Ville Langén is licensed under CC BY-SA 4.0 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
